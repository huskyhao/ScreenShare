name: Deploy to Server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_restart:
        description: 'Force restart service'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create backup
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          cd ${{ secrets.SERVER_PATH }} &&
          mkdir -p backups &&
          if [ -f config/server.json ]; then
            cp config/server.json backups/server.json.$(date +%Y%m%d_%H%M%S)
          fi
        '

    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          cd ${{ secrets.SERVER_PATH }} &&
          echo "üöÄ Starting deployment..." &&

          # Stop service
          pm2 stop screenshare-signaling 2>/dev/null || echo "Service was not running" &&
          pm2 delete screenshare-signaling 2>/dev/null || echo "Service was not in PM2" &&

          # Configure git to use SSH instead of HTTPS
          git config --global url."git@github.com:".insteadOf "https://github.com/" &&

          # Pull latest changes with retry mechanism
          for i in {1..3}; do
            echo "Attempt $i: Pulling latest changes..." &&
            if git fetch origin && git reset --hard origin/master; then
              echo "‚úÖ Git pull successful"
              break
            else
              echo "‚ö†Ô∏è  Git pull failed, retrying in 5 seconds..."
              sleep 5
            fi
          done &&

          # Install dependencies
          npm ci --production &&

          # Restore configuration if needed
          if [ ! -f config/server.json ] && [ -f config/server.example.json ]; then
            echo "‚ö†Ô∏è  No server.json found, using example configuration"
            cp config/server.example.json config/server.json
          fi &&

          # Start service with force option
          pm2 start src/server.js --name screenshare-signaling -f &&
          pm2 save &&

          echo "‚úÖ Deployment completed successfully"
        '

    - name: Force restart if requested
      if: github.event.inputs.force_restart == 'true'
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          cd ${{ secrets.SERVER_PATH }} &&
          pm2 restart screenshare-signaling &&
          pm2 save
        '

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 10

        # Check if service is running
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          pm2 status screenshare-signaling
        '

        # Test HTTP endpoint
        curl -f http://${{ secrets.SERVER_HOST }}:3000/config || {
          echo "‚ùå Service health check failed"
          exit 1
        }

        echo "‚úÖ Deployment verification successful"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment to ${{ github.event.inputs.environment }} completed successfully"
        else
          echo "‚ùå Deployment to ${{ github.event.inputs.environment }} failed"
        fi
