name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  # 代码质量检查和测试
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: |
        npx eslint src/ --ext .js --format stylish || true

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for outdated packages
      run: npm outdated || true

    - name: Validate package.json
      run: npx package-json-validator package.json

    - name: Test server startup
      run: |
        timeout 10s npm run server &
        sleep 5
        curl -f http://localhost:3000/config || exit 1

  # 构建 Electron 应用
  build:
    name: Build Electron App
    needs: test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Electron app
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-app-${{ matrix.os }}
        path: dist/
        retention-days: 30

  # 部署到服务器
  deploy:
    name: Deploy to Server
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        log-public-key: false

    - name: Deploy to server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          cd ${{ secrets.SERVER_PATH }} &&

          # Configure git to use SSH instead of HTTPS
          git config --global url."git@github.com:".insteadOf "https://github.com/" &&

          # Pull latest changes with retry mechanism
          for i in {1..3}; do
            echo "Attempt $i: Pulling latest changes..." &&
            if git fetch origin && git reset --hard origin/master; then
              echo "✅ Git pull successful"
              break
            else
              echo "⚠️  Git pull failed, retrying in 5 seconds..."
              sleep 5
            fi
          done &&

          npm ci --production &&
          pm2 restart screenshare-signaling -f || pm2 start src/server.js --name screenshare-signaling -f &&
          pm2 save
        '

    - name: Verify deployment
      run: |
        sleep 10
        curl -f http://${{ secrets.SERVER_HOST }}:3000/config

  # 发布 Release
  release:
    name: Create Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release assets
      run: |
        cd artifacts
        for dir in */; do
          zip -r "${dir%/}.zip" "$dir"
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
